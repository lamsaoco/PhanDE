docker run -it \
  -e POSTGRES_USER="root" \
  -e POSTGRES_PASSWORD="root" \
  -e POSTGRES_DB="ny_taxi" \
  -v D:/2_docker_sql/ny_taxi_postgres_data:/var/lib/postgresql/data \
  -p 5432:5432 \
  postgres:13

docker run -it \
  -e PGADMIN_DEFAULT_EMAIL="admin@admin.com" \
  -e PGADMIN_DEFAULT_PASSWORD="root" \
  -p 8080:80 \
  dpage/pgadmin4

pgcli -h localhost -p 5432 -u root -d ny_taxi 

docker network create phan-network

docker run -it \
  -e POSTGRES_USER="root" \
  -e POSTGRES_PASSWORD="root" \
  -e POSTGRES_DB="ny_taxi" \
  -v D:/2_docker_sql/ny_taxi_postgres_data:/var/lib/postgresql/data \
  -p 5432:5432 \
  --network=phan-network \
  --name=phan-database \
  postgres:13

docker run -it \
  -e PGADMIN_DEFAULT_EMAIL="admin@admin.com" \
  -e PGADMIN_DEFAULT_PASSWORD="root" \
  -p 8080:80 \
  --network=phan-network \
  --name=phan-pgadmin \
  dpage/pgadmin4


python ingest_data.py \
    --user=root \
    --password=root \
    --host=localhost \
    --port=5432 \
    --db=ny_taxi \
    --table_name=yellow_taxi_trips

docker build -t taxi_ingest:v001 .

docker run -it \
    --network=phan-network \
    taxi_ingest:v001 \
    --user=root \
    --password=root \
    --host=localhost \
    --port=5432 \
    --db=ny_taxi \
    --table_name=yellow_taxi_trips

docker run -it \
    --network=external_phan_network \
    data_ingest:test \
    --user=root \
    --password=root \
    --host=pgdatabase \
    --port=5432 \
    --db=ny_taxi \
    --table_name=yellow_taxi_trips \
    --url=https://github.com/DataTalksClub/nyc-tlc-data/releases/download/yellow/yellow_tripdata_2021-01.csv.gz

python Scripts/ingest_data.py \
    --user=root \
    --password=root \
    --host=localhost \
    --port=5432 \
    --db=ny_taxi \
    --table_name=yellow_taxi_trips \
    --url=https://github.com/DataTalksClub/nyc-tlc-data/releases/download/yellow/yellow_tripdata_2021-01.csv.gz

# CÁC BƯỚC KHỞI TẠO AIRFLOW THỦ CÔNG
# 1. Tạo virtual environment và cài đặt Airflow
# Tạo thư mục dự án
mkdir airflow-manual && cd airflow-manual

# Tạo virtualenv
python3 -m venv venv
source venv/bin/activate
pip install --upgrade pip setuptools wheel

# Cài đặt các thư viện liên quan với version phù hợp với các điều kiện từ link
pip install pandas sqlalchemy psycopg2-binary --constraint "https://raw.githubusercontent.com/apache/airflow/constraints-3.0.4/constraints-3.12.txt"

# Cài Airflow theo version
AIRFLOW_VERSION=3.0.4
PYTHON_VERSION="$(python --version | awk '{print $2}' | cut -d. -f1-2)"   # ví dụ 3.12
CONSTRAINT_URL="https://raw.githubusercontent.com/apache/airflow/constraints-${AIRFLOW_VERSION}/constraints-${PYTHON_VERSION}.txt"

# Cài airflow với PostgreSQL support
pip install "apache-airflow[postgres]==${AIRFLOW_VERSION}" -c "${CONSTRAINT_URL}"

# Cài auth manager (bắt buộc từ 2.9+)
pip install apache-airflow-providers-fab --constraint "${CONSTRAINT_URL}"

# 2. Khởi tạo cấu hình Airflow
# Kiểm tra kỹ lại bước này xem AIRFLOW_HOME được đặt đúng chỗ chưa
export AIRFLOW_HOME=$(pwd)/airflow_home

# Init project

airflow db init => airflow db migrate

# Thư mục airflow_home/ sẽ được tạo, chứa:
# - airflow.cfg: config file chính
# - logs/
# - dags/: bạn sẽ đặt file DAG vào đây

# 4. Tạo user đăng nhập Airflow Web UI
# 3.x mặc định SimpleAuthManager → không có airflow users create.
# Nếu muốn quản lý user kiểu cũ/FAB UI: pip install apache-airflow-providers-fab rồi đặt

[core]
auth_manager = airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager

# Sau đó dùng lại:
airflow users create \
    --username admin \
    --firstname Admin \
    --lastname Phan \
    --role Admin \
    --email admin@admin.com \
    --password admin

# 5. Cấu hình Airflow để dùng PostgreSQL (nếu chưa phải SQLite)
# Mặc định Airflow dùng SQLite (cho test). Bạn cần sửa airflow.cfg:

# airflow_home/airflow.cfg
[core]
sql_alchemy_conn = postgresql+psycopg2://root:root@localhost:5432/ny_taxi

 #Nếu bạn đang dùng Docker cho PostgreSQL, thì localhost phải là IP của container, hoặc dùng bridge network (VD: 172.18.0.X).

 # 6. Khởi chạy Airflow
 # Chạy webserver và scheduler ở 2 terminal khác nhau:

 # Terminal 1
airflow webserver --port 8081 => airflow api-server --host 0.0.0.0 --port 8081

# Terminal 2
airflow scheduler

# Bổ sung thêm kể từ Airflow ver 3.0.4
airflow dag-processor

# 7. Tạo DAG trong airflow_home/dags/ny_taxi_dag.py

# 8. Tạo thư mục scripts/ và đặt file ingest_data.py vào đó
# Ví dụ đặt tại:
/home/phan/airflow-manual/scripts/ingest_data.py
# Đừng quên:
chmod +x ingest_data.py

# 9. Truy cập Airflow UI và Trigger DAG
# Vào http://localhost:8081
# Enable DAG manual_ingest_taxi_data
# Trigger DAG
# Xem log task ingest_data_to_postgres

# 10. Kiểm tra kết quả trên PostgreSQL

# Kiểm tra list dag
airflow dags list

---------------------------------------------------
# Khi khởi động lại toàn bộ
cd airflow-manual

source venv/bin/activate

export AIRFLOW_HOME=$(pwd)/airflow_home

# Chạy api server với option -apps all để tạo cho cả server, core, executor
airflow api-server --apps all --host 0.0.0.0 --port 8081

# Chỉ rõ URL của execution API nếu không phải dùng cổng mặc định 8080
export AIRFLOW__CORE__EXECUTION_API_SERVER_URL="http://localhost:8081/execution/"
export AIRFLOW__API__BASE_URL="http://localhost:8081"

# Tách riêng Terminal để chạy => Khi muốn tắt hoặc bật service sẽ không ảnh hưởng đến nhau
airflow scheduler
airflow dag-processor
---------------------------------------------------

python Scripts/ingest_data.py \
                --user=root \
                --password=root \
                --host=localhost \
                --port=5432 \
                --db=ny_taxi \
                --color=yellow \
                --year=2025 \
                --month=1